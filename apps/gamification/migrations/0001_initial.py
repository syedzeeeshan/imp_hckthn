# Generated by Django 5.0.6 on 2025-09-21 07:54

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('activity', 'Activity Badge'), ('milestone', 'Milestone Badge'), ('social', 'Social Badge'), ('leadership', 'Leadership Badge'), ('academic', 'Academic Badge'), ('special', 'Special Badge')], default='activity', max_length=20)),
                ('difficulty', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=20)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='badges/')),
                ('icon_url', models.URLField(blank=True)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('requirements', models.JSONField(blank=True, default=dict, help_text='Requirements to earn this badge')),
                ('points_reward', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until earned')),
                ('is_repeatable', models.BooleanField(default=False)),
                ('total_earned', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'badges',
                'ordering': ['difficulty', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('leaderboard_type', models.CharField(choices=[('points', 'Points Leaderboard'), ('level', 'Level Leaderboard'), ('badges', 'Badge Count Leaderboard'), ('activity', 'Activity Leaderboard'), ('streak', 'Streak Leaderboard')], default='points', max_length=20)),
                ('time_period', models.CharField(choices=[('all_time', 'All Time'), ('monthly', 'Monthly'), ('weekly', 'Weekly'), ('daily', 'Daily')], default='all_time', max_length=20)),
                ('college_specific', models.BooleanField(default=False)),
                ('club_specific', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('show_top_n', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(10)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Leaderboard',
                'verbose_name_plural': 'Leaderboards',
                'db_table': 'leaderboards',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PointsCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('base_points', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)])),
                ('multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Points Category',
                'verbose_name_plural': 'Points Categories',
                'db_table': 'points_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('milestone', 'Milestone Achievement'), ('challenge', 'Challenge Achievement'), ('seasonal', 'Seasonal Achievement'), ('special', 'Special Achievement')], default='milestone', max_length=20)),
                ('requirements', models.JSONField(default=dict, help_text='Requirements to complete achievement')),
                ('points_reward', models.IntegerField(default=500)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('total_participants', models.IntegerField(default=0)),
                ('total_completed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'db_table': 'achievements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_points', models.IntegerField(default=0)),
                ('lifetime_points', models.IntegerField(default=0)),
                ('activity_points', models.IntegerField(default=0)),
                ('social_points', models.IntegerField(default=0)),
                ('leadership_points', models.IntegerField(default=0)),
                ('academic_points', models.IntegerField(default=0)),
                ('special_points', models.IntegerField(default=0)),
                ('global_rank', models.IntegerField(default=0)),
                ('college_rank', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0, help_text='Current consecutive days with activity')),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('experience_points', models.IntegerField(default=0)),
                ('points_to_next_level', models.IntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='points_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Points',
                'verbose_name_plural': 'User Points',
                'db_table': 'user_points',
                'ordering': ['-total_points'],
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points', models.IntegerField()),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('spent', 'Points Spent'), ('bonus', 'Bonus Points'), ('penalty', 'Penalty'), ('level_bonus', 'Level Up Bonus'), ('badge_reward', 'Badge Reward'), ('streak_bonus', 'Streak Bonus'), ('adjustment', 'Admin Adjustment')], max_length=20)),
                ('category', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True)),
                ('related_object_type', models.CharField(blank=True, max_length=50)),
                ('related_object_id', models.UUIDField(blank=True, null=True)),
                ('balance_after', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Points Transaction',
                'verbose_name_plural': 'Points Transactions',
                'db_table': 'points_transactions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'transaction_type'], name='points_tran_user_id_ce15bb_idx'), models.Index(fields=['created_at'], name='points_tran_created_6e4529_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('expired', 'Expired')], default='in_progress', max_length=20)),
                ('progress', models.JSONField(default=dict, help_text='Progress tracking data')),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='gamification.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'db_table': 'user_achievements',
                'ordering': ['-started_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('earned_for', models.TextField(blank=True, help_text='What activity earned this badge')),
                ('is_featured', models.BooleanField(default=False)),
                ('is_visible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'db_table': 'user_badges',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
    ]
